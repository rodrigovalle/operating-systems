Rodrigo Valle
104 494 120

NOTES:
- Whenever a system call that's essential to the operation of the program fails,
  the program will exit with status 2.
- The program doesn't have a SIGINT handler, instead it unsets the ISIG bit and
  catches the \003 character generated by ctrl-c instead.
- I recommend setting your text editor's tab width to 4 spaces :)

FEATURES
- a --shell flag that spawns a background shell and allows you to type in
  commands that it should executing, printing output back out to the screen
- without the --shell flag, this program will just echo typed keys back out to
  the screen one at a time.
- ^C sends SIGINT to the background shell
- ^D closes the and sends SIGHUP to the background shell and exits with status 0
  --> it also takes extra care to avoid creating a race condition between ^D and
  --> SIGPIPE by calling pthread_cancel to avoid having the listener thread try
  --> to exit with status 1 upon recieving EOF when the pipe closes.
- upon recieving SIGPIPE or EOF from the shell, the program exits with status 1

TESTING:
- I ran through each one of the bullets in the rubric and made sure that my
  program performed the correct behavior in each case
- typing exit 3 in the shell causes the shell to exit with code 3, and my
  program can pick up the exit status without a problem
- typing a command into the shell causes the background shell to run the command
  and the output to be written to the screen by the background thread
- piping output to od -ta allows us to see that \r\n is being printed in place
  of \n
- pressing ^D returns 0 and causes the shell to recieve SIGHUP (and EOF when the
  pipe closes).
- pressing ^C returns 1 because the shell exits and closes its pipes, sending an
  EOF over the pipe to the background thread, which exits with code 1.

REFERENCES:
https://blog.nelhage.com/2009/12/a-brief-introduction-to-termios-termios3-and-stty/
- provided a lot of insight in the various terminal/tty settings that termios.h
  has, along with a description of how terminals operate.

http://stackoverflow.com/questions/19265191/
- helped explain what happens when you forget to close pipe ends that don't
  belong to the current process.

http://stackoverflow.com/questions/358342/
- explains what changes when we switch the terminal to noncanonical mode

http://stackoverflow.com/questions/7384110/
- helpful for understanding why you need a \n to flush the buffer when printing

man pages <3 / piazza / TA
- I also referenced a lot of man page documentation, eg. termios, read, write,
  waitpid, exec, pthread, atexit
- asked/answered questions on piazza, took a lot of advice given there.
- TA was also very helpful as well

SPECIAL THANKS TO:
- Austin Ma
he gave me his mouse
