#!/bin/python3
import sys
import pprint
from helper import block, inode
from csv_helper import csv_reader

pp = pprint.PrettyPrinter(indent=4)

# directory with csv files can be specified as the first argument
# if no argument, assume csv files are in the current directory
current_dir = ""
if len(sys.argv) == 2:
    current_dir = sys.argv[1];


# UNALLOCATED BLOCKS: blocks that are in use but also listed on the free bitmap
#def unallocated_blocks():
#    group_csv = get_reader('group.csv')
#    bitmap_csv = get_reader('bitmap.csv')
#    inode_csv = get_reader('inode.csv')
#
#    # list comprehension for all bitmaps representing free blocks in group.csv
#    block_bitmap_blocks = [row['block_bitmap_block'] for row in group_csv]
#    free_blocks = set()
#
#    # check which bits in block bitmaps represent free blocks
#    for row in bitmap_csv:
#        if row['bitmap_block'] in block_bitmap_blocks:
#            free_blocks.add(int(row['element_number'], 16))
#
#    # look for all allocated blocks (in inode or indirect)
#    # TODO: probably have to handle indirect blocks too, i'll get there someday
#    # TODO: yeah this definitely still does something wrong
#    allocated_blocks = set()
#    for row in inode_csv:
#        for block in row['block_pointers']:
#            if block != '0':
#                allocated_blocks.add(int(block, 16))
#
#    indirect_blocks = set()
#    #for row in indirect_csv:
#        #for
#    # isn't python wonderful?
#    pp.pprint(allocated_blocks & free_blocks)

def main():
    # build a simple model of the file system, which we'll check for
    # inconsistencies
    r = csv_reader(current_dir)

    super_csv = r.entry_list('super.csv')
    first_block = super_csv[0]['first_data_block']

    group_csv = r.entry_list('group.csv')
    bitmap_csv = r.entry_list('bitmap.csv')
    inode_csv = r.entry_list('inode.csv')

    inodeBitmapBlocks = [block(0)]

    if first_block != 0:
        inodeBitmapBlocks.append(block(first_block))

    for line in group_csv:
        inodeBitmapBlocks.append(block(line['inode_bitmap_block']))
        inodeBitmapBlocks.append(block(line['block_bitmap_block']))
        inodeBitmapBlocks.append(block(line['inode_table_block']))
    
    for b in inodeBitmapBlocks:
        print(b.block_number)

    #blockBimtapBlocks = []
    #inodeFreeList
    #blockFreeList

if __name__ == '__main__':
    main()
