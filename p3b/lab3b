#!/bin/python3
import sys
import pprint
import objects as obj
from logger import warning
from csv_helper import csv_reader


# directory with csv files can be specified as the first argument
# if no argument, assume csv files are in the current directory
cur_dir = ""
if len(sys.argv) == 2:
    cur_dir = sys.argv[1]

# globals
pp = pprint.PrettyPrinter(indent=4)
r = csv_reader(cur_dir)
warn = warning('lab3b_check.txt')
block_counter = 0
blockAllocated = {} # <key=block_num, value=Block class>

super_csv = r.entry_list('super.csv')
inodes_per_group = super_csv[0]['inodes_per_group']
ptrs_per_indirect = super_csv[0]['block_size'] // 4
max_inode_nr = super_csv[0]['total_inodes']
max_block_nr = super_csv[0]['total_blocks'] - 1  # account for index offset

group_csv = r.entry_list('group.csv')
bitmap_csv = r.entry_list('bitmap.csv')
inode_csv = r.entry_list('inode.csv')
directory_csv = r.entry_list('directory.csv')
indirect_csv = r.entry_list('indirect.csv')

def main():
    global block_counter
    global blockAllocated

    # build a model of the file system, which we'll check for inconsistencies
    blockBitmapBlocks = []
    inodeBitmapBlocks = []

    blockFreeList = []
    inodeFreeList = []

    inodeAllocated = {} # <key=inode_num, value=Inode class>

    directoryTable = {}
    indirectTable  = {}

    # populate blockBitmapBlocks and inodeBitmapBlocks
    for group in group_csv:
        blockBitmapBlocks.append(group['block_bitmap_block'])
        inodeBitmapBlocks.append(group['inode_bitmap_block'])
    

    # populate blockFreeList and inodeFreeList
    for entry in bitmap_csv:
        n = entry['element_number']
        if entry['bitmap_block'] in blockBitmapBlocks:  # found free block
            blockFreeList.append(n)
        elif entry['bitmap_block'] in inodeBitmapBlocks:  # found free inode
            inodeFreeList.append(n)

    # populate indirectTable
    for i_entry in indirect_csv:
        i_tup = (i_entry['containing_block'], i_entry['entry_number'])
        indirectTable[i_tup] = i_entry['block_pointer']

    # populate blockAllocated and inodeAllocated
    """
    inode.csv contains the field: number of blocks.  We need to make it so the
    code iterates through only that number of blocks that are actually
    allocated (given to us by this number of blocks field).  If any of these
    allocated blocks have a value of 0 then we should output the error like so:

    if blocknum == 0 or blocknum > maxblocknum
        INVALID_BLOCK_ERROR
    else 
        put the block corresponding to blocknum into blockAllocated dictionary
    """
    for inode in inode_csv:
        inode_nr = inode['inode_number']
        inodeAllocated[inode_nr] = obj.inode(inode_nr, inode['ref_count'])

        alloc_blocks = inode['allocated_blocks']
        block_counter = 0

        direct_blocks = inode['block_pointers'][:12]
        single_indirect = inode['block_pointers'][12]
        double_indirect = inode['block_pointers'][13]
        triple_indirect = inode['block_pointers'][14]

        try:
            for i, ptr in enumerate(direct_blocks):
                if block_counter == alloc_blocks:
                    raise Exception

                if ptr == 0 or ptr > max_block_nr:
                    warn.INVALID_BLOCK(ptr, inode_nr, -1, i)
                else:
                    # add to blockAllocated
                    if ptr not in blockAllocated:
                        blockAllocated[ptr] = obj.block(ptr)
                    blockAllocated[ptr].add_reference((inode_nr, i))

                block_counter += 1

            if block_counter == alloc_blocks:
                raise Exception


            # check single indirect block
            if single_indirect == 0 or single_indirect > max_block_nr:
                warn.INVALID_BLOCK(single_indirect, inode_nr, -1, 12)
            else:
                if single_indirect not in blockAllocated:
                    blockAllocated[single_indirect] = obj.block(single_indirect)
                blockAllocated[single_indirect].add_reference((inode_nr, 12))

            block_counter += 1 # add the singly indirect block

            traverse_single_indirect(single_indirect, inode_nr, alloc_blocks, False)


            # check double indirect block
            if double_indirect == 0 or double_indirect > max_block_nr:
                warn.INVALID_BLOCK(double_indirect, inode_nr, -1, 13)
            else:
                if double_indirect not in blockAllocated:
                    blockAllocated[double_indirect] = obj.block(double_indirect)
                blockAllocated[double_indirect].add_reference((inode_nr, 13))

            block_counter += 1 # add the doubly indirect block

            traverse_double_indirect(double_indirect, inode_nr, alloc_blocks, False)
            traverse_triple_indirect(triple_indirect, inode_nr, alloc_blocks)

        except Exception:
            #print('{} {}'.format(block_counter, alloc_blocks))
            continue


    referencedInodes = {}
    # populate inode reference lists in inodeAllocated
    for dir_entry in directory_csv:
        child_inode_num = dir_entry['entry_inode']
        parent_inode_num = dir_entry['parent_inode_number']
        entry_num = dir_entry['entry_number']
        inode_name = dir_entry['name']

        # populate the directory table
        if parent_inode_num != child_inode_num or parent_inode_num == 2:
            directoryTable[child_inode_num] = parent_inode_num

        # update inodeAllocated
        if child_inode_num in inodeAllocated:
            inodeAllocated[child_inode_num].add_reference(
                (parent_inode_num, entry_num)
            )

        # update the list of all inodes referenced by directories
        if child_inode_num not in referencedInodes:
            referencedInodes[child_inode_num] = obj.inode(child_inode_num, 0)
        referencedInodes[child_inode_num].add_reference(
            (parent_inode_num, entry_num)
        )
# checks for the "." and ".." entries
        if entry_num == 0 and child_inode_num != parent_inode_num:
            warn.INCORRECT_DIR_ENTRY(
                parent_inode_num,
                inode_name,
                child_inode_num,
                parent_inode_num
            )
        elif entry_num == 1 and child_inode_num != directoryTable[parent_inode_num]:
            warn.INCORRECT_DIR_ENTRY(
                parent_inode_num,
                inode_name,
                child_inode_num,
                directoryTable[parent_inode_num]
            )
    
    for inode_ref_by_dir in referencedInodes.values():
        if inode_ref_by_dir.inode_number not in inodeAllocated:
            warn.UNALLOCATED_INODE(
                inode_ref_by_dir.inode_number,
                inode_ref_by_dir.referenced_by
            )


    for i in inodeAllocated.values():
        linkCnt = len(i.referenced_by)
        if i.inode_number > 10 and linkCnt == 0:
            warn.MISSING_INODE(
                i.inode_number,
                group_csv[i.inode_number // inodes_per_group]['inode_bitmap_block']
            )
        elif linkCnt != i.refcount:
            warn.INODE_LINKCOUNT(
                i.inode_number,
                i.refcount,
                linkCnt
            )

     
    for inode_nr in inodeFreeList:
        if inode_nr in inodeAllocated:
            warn.UNALLOCATED_INODE(
                inode_nr,
                inodeAllocated[i.inode_nr].referenced_by
            )

    for n in range(11, max_inode_nr):
        if n not in inodeFreeList and n not in inodeAllocated:
            warn.MISSING_INODE(
                n,
                group_csv[n // inodes_per_group]['inode_bitmap_block']
            )

    for b in blockAllocated.values():
        if len(b.referenced_by) > 1:
            reflist = [ref for ref in b.referenced_by]
            warn.DUPLICATELY_ALLOCATED_BLOCK(
                b.block_number,
                reflist
            )

    for block_nr in blockFreeList:
        if block_nr in blockAllocated:
            warn.UNALLOCATED_BLOCK(
                block_nr,
                blockAllocated[block_nr].referenced_by
            )


def traverse_single_indirect(single_indirect, inode_nr, alloc_blocks, chk):
    global block_counter
    global blockAllocated

    if chk:
        if single_indirect == 0 or single_indirect > max_block_nr:
            warn.INVALID_BLOCK(single_indirect, inode_nr, -1, 12)
        #else:
        #   if single_indirect not in blockAllocated:
        #       blockAllocated[single_indirect] = obj.block(single_indirect)
        #   blockAllocated[single_indirect].add_reference((inode_nr, 12))

        block_counter += 1 # add the singly indirect block

    for ientry in get_indirect_entries(single_indirect):
        if block_counter == alloc_blocks:
            raise Exception

        ptr = ientry['block_pointer']
        if ptr == 0 or ptr > max_block_nr:
            warn.INVALID_BLOCK(ptr, inode_nr, single_indirect, ientry['entry_number'])
        else:
            if ptr not in blockAllocated:
                blockAllocated[ptr] = obj.block(ptr)
            blockAllocated[ptr].add_reference((inode_nr, ientry['entry_number']))

        block_counter += 1

    if block_counter == alloc_blocks:
        raise Exception

def traverse_double_indirect(double_indirect, inode_nr, alloc_blocks, chk):
    global block_counter
    global blockAllocated

    if chk:
        if double_indirect == 0 or double_indirect > max_block_nr:
            warn.INVALID_BLOCK(double_indirect, inode_nr, -1, 13)
        #else:
        #   if double_indirect not in blockAllocated:
        #       blockAllocated[double_indirect] = obj.block(double_indirect)
        #   blockAllocated[double_indirect].add_reference((inode_nr, 13))

        block_counter += 1 # add the doubly indirect block

    for ientry in get_indirect_entries(double_indirect):
        if block_counter == alloc_blocks:
            raise Exception

        ptr = ientry['block_pointer']
        if ptr == 0 or ptr > max_block_nr:
            warn.INVALID_BLOCK(ptr, inode_nr, double_indirect, ientry['entry_number'])
        else:
            if ptr not in blockAllocated:
                blockAllocated[ptr] = obj.block(ptr)
            blockAllocated[ptr].add_reference((inode_nr, ientry['entry_number']))
            traverse_single_indirect(ptr, inode_nr, alloc_blocks, True)

        block_counter += 1

    if block_counter == alloc_blocks:
        raise Exception

def traverse_triple_indirect(triple_indirect, inode_nr, alloc_blocks):
    global block_counter
    global blockAllocated

    if triple_indirect == 0 or triple_indirect > max_block_nr:
        warn.INVALID_BLOCK(triple_indirect, inode_nr, -1, 14)
    #else:
    #   if triple_indirect not in blockAllocated:
    #       blockAllocated[triple_indirect] = obj.block(triple_indirect)
    #   blockAllocated[triple_indirect].add_reference((inode_nr, 14))

    block_counter += 1 # add the doubly indirect block

    for ientry in get_indirect_entries(triple_indirect):
        if block_counter == alloc_blocks:
            raise Exception

        ptr = ientry['block_pointer']
        if ptr == 0 or ptr > max_block_nr:
            warn.INVALID_BLOCK(ptr, inode_nr, triple_indirect, ientry['entry_number'])
        else:
            if ptr not in blockAllocated:
                blockAllocated[ptr] = obj.block(ptr)
            blockAllocated[ptr].add_reference((inode_nr, ientry['entry_number']))
            traverse_double_indirect(ptr, inode_nr, alloc_blocks, True)

        block_counter += 1

    if block_counter == alloc_blocks:
        raise Exception



def get_indirect_entries(blk):
    entries = []

    for i in range(ptrs_per_indirect):
        for ientry in indirect_csv:
            if ientry['entry_number'] == i and ientry['containing_block'] == blk:
                entries.append(ientry)

    return entries

if __name__ == '__main__':
    main()
